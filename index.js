// Generated by CoffeeScript 1.7.1
(function() {
  var Thing, delay;

  delay = function(cb, time) {
    return setTimeout(time, cb);
  };

  Thing = (function() {
    function Thing() {
      this.callbacks = {};
      this.timers = {};
      this.lastevent = null;
      this.datas = {};
    }

    Thing.prototype.waitfor = function(event, callback) {
      if (typeof event === 'string') {
        if (!(event in this.callbacks)) {
          this.callbacks[event] = [];
        }
        this.callbacks[this.lastevent = event].push(callback);
        return this;
      } else {
        return this.waitforMany(event, callback);
      }
    };

    Thing.prototype.waitforMany = function(events, callback) {
      var done;
      done = 0;
      (function(_this) {
        return (function(events, callback, done) {
          var cb, event, _i, _len;
          cb = function(data, event) {
            var e, _i, _len;
            _this.datas[event] = data;
            if (++done >= events.length) {
              callback.apply(null, events.map(function(e) {
                return _this.datas[e];
              }));
              for (_i = 0, _len = events.length; _i < _len; _i++) {
                e = events[_i];
                delete _this.datas[e];
              }
              return clearTimeout(_this.timers[events.join(',')]);
            }
          };
          for (_i = 0, _len = events.length; _i < _len; _i++) {
            event = events[_i];
            if (!(event in _this.callbacks)) {
              _this.callbacks[event] = [];
            }
            _this.callbacks[event].push(cb);
          }
          return _this.lastevent = events;
        });
      })(this)(events, callback, done);
      return this;
    };

    Thing.prototype.till = function(timeout, callback) {
      var event;
      event = this.lastevent;
      return (function(_this) {
        return function(event) {
          if (typeof event === 'string') {
            _this.timers[event] = delay(timeout, function() {
              delete _this.callbacks[event];
              return callback();
            });
          } else {
            _this.timers[event.join(',')] = delay(timeout, function() {
              var done, e, _i, _len;
              done = {};
              for (_i = 0, _len = event.length; _i < _len; _i++) {
                e = event[_i];
                delete _this.callbacks[e];
                if (e in _this.datas) {
                  done[e] = _this.datas[e];
                  delete _this.datas[e];
                }
              }
              return callback(done);
            });
          }
          return _this;
        };
      })(this)(event);
    };

    Thing.prototype.deliver = function(event, data) {
      var callback, _i, _len, _ref;
      if (event in this.timers) {
        clearTimeout(this.timers[event]);
      }
      if (event in this.callbacks) {
        _ref = this.callbacks[event];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callback = _ref[_i];
          callback(data, event);
        }
      }
      return this;
    };

    return Thing;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = function() {
      return new Thing;
    };
  } else {
    this.toolate = function() {
      return new Thing;
    };
  }

}).call(this);
