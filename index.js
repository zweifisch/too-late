// Generated by CoffeeScript 1.9.0
(function() {
  var AssocList, Thing, delay;

  AssocList = require("./AssocList");

  delay = function(cb, time) {
    return setTimeout(time, cb);
  };

  Thing = (function() {
    function Thing() {
      this.callbacks = new AssocList;
      this.timers = new AssocList;
      this.lastevent = null;
      this.datas = new AssocList;
    }

    Thing.prototype.waitfor = function(event, callback) {
      var pushed;
      if (typeof event === 'string') {
        pushed = this.callbacks.swapItem(event, function(cbs) {
          cbs.push(callback);
          return cbs;
        });
        if (!pushed) {
          this.callbacks.appendItem(event, [callback]);
        }
        this.lastevent = event;
        return this;
      } else {
        return this.waitforMany(event, callback);
      }
    };

    Thing.prototype.waitforMany = function(events, callback) {
      var done;
      done = 0;
      (function(_this) {
        return (function(events, callback, done) {
          var cb, event, pushed, _i, _len;
          cb = function(data, event) {
            var e, _i, _len;
            _this.datas.swapItem(event, function() {
              return data;
            }) || _this.datas.appendItem(event, data);
            if (++done >= events.length) {
              callback.apply(null, events.map(function(e) {
                return _this.datas.getItem(e);
              }));
              for (_i = 0, _len = events.length; _i < _len; _i++) {
                e = events[_i];
                _this.datas.deleteItem(e);
              }
              return clearTimeout(_this.timers.deleteItem(events.join(',')));
            }
          };
          for (_i = 0, _len = events.length; _i < _len; _i++) {
            event = events[_i];
            pushed = _this.callbacks.swapItem(event, function(cbs) {
              cbs.push(cb);
              return cbs;
            });
            if (!pushed) {
              _this.callbacks.appendItem(event, [cb]);
            }
          }
          return _this.lastevent = events;
        });
      })(this)(events, callback, done);
      return this;
    };

    Thing.prototype.till = function(timeout, callback) {
      var event;
      event = this.lastevent;
      return (function(_this) {
        return function(event) {
          if (typeof event === 'string') {
            _this.timers.appendItem(event, delay(timeout, function() {
              _this.callbacks.deleteItem(event);
              return callback();
            }));
          } else {
            _this.timers.appendItem(event.join(','), delay(timeout, function() {
              var done, e, _i, _len;
              done = {};
              for (_i = 0, _len = event.length; _i < _len; _i++) {
                e = event[_i];
                _this.callbacks.deleteItem(e);
                done[e] = _this.datas.deleteItem(e);
              }
              return callback(done);
            }));
          }
          return _this;
        };
      })(this)(event);
    };

    Thing.prototype.deliver = function(event, data) {
      var callback, callbacks, _i, _len;
      clearTimeout(this.timers.deleteItem(event));
      if (callbacks = this.callbacks.deleteItem(event)) {
        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
          callback = callbacks[_i];
          callback(data, event);
        }
      }
      return this;
    };

    return Thing;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = function() {
      return new Thing;
    };
  } else {
    this.toolate = function() {
      return new Thing;
    };
  }

}).call(this);
