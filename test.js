// Generated by CoffeeScript 1.9.0
(function() {
  var AssocList, assert, delay;

  assert = require("assert");

  AssocList = require("./AssocList");

  delay = function(time, cb) {
    return setTimeout(cb, time);
  };

  describe("assoc list", function() {
    it("should append", function() {
      var alist;
      alist = new AssocList;
      alist.appendItem("key", "val");
      alist.appendItem("key2", "val");
      return assert.deepEqual(alist.toArray(), [["key", "val"], ["key2", "val"]]);
    });
    it("should get", function() {
      var alist;
      alist = new AssocList;
      alist.appendItem("key", "val");
      alist.appendItem("key2", "val2");
      assert.deepEqual(alist.getItem("key"), "val");
      return assert.deepEqual(alist.getItem("key2"), "val2");
    });
    it('should swap', function() {
      var alist, swapped;
      alist = new AssocList;
      alist.appendItem("key", "val");
      alist.swapItem("key", function(val) {
        return val.length;
      });
      assert.equal(alist.getItem("key"), 3);
      swapped = alist.swapItem("key2", function(val) {
        return val.length;
      });
      return assert.equal(swapped, false);
    });
    return it("should delete", function() {
      var alist;
      alist = new AssocList;
      alist.appendItem("key", "val");
      alist.appendItem("key2", "val2");
      assert.equal("val2", alist.deleteItem("key2"));
      assert.deepEqual(alist.toArray(), [["key", "val"]]);
      assert.equal("val", alist.deleteItem("key"));
      return assert.deepEqual(alist.toArray(), []);
    });
  });

  describe("too late", function() {
    it('should be on time', function(done) {
      var customer;
      customer = require('./index')();
      customer.waitfor('food', function(food) {
        return done();
      }).till(30, function() {
        return done(new Error("should be served on time"));
      });
      return delay(20, function() {
        return customer.deliver('food', 'patato salad');
      });
    });
    it('should be too late', function(done) {
      var customer;
      customer = require('./index')();
      customer.waitfor('food', function(food) {
        return done(new Error(food + " should not be served on time"));
      }).till(30, function() {
        return done();
      });
      return delay(40, function() {
        return customer.deliver('food', 'patato spaghetti');
      });
    });
    it('should be on time multi', function(done) {
      var customer;
      customer = require('./index')();
      customer.waitfor(['food', 'drink'], function(food, drink) {
        if (food === 'patato spaghetti' && drink === 'soda water') {
          return done();
        } else {
          return done(new Error('error'));
        }
      }).till(50, function(available) {
        return done(new Error('should not be served on time'));
      });
      delay(20, function() {
        return customer.deliver('food', 'patato spaghetti');
      });
      return delay(40, function() {
        return customer.deliver('drink', 'soda water');
      });
    });
    return it('should be too late multi', function(done) {
      var customer;
      customer = require('./index')();
      customer.waitfor(['food', 'drink'], function(food, drink) {
        return done(new Error(food + " and " + drink + " should not be served"));
      }).till(50, function(available) {
        if (JSON.stringify(available) === '{"food":"patato spaghetti"}') {
          return done();
        } else {
          return done(JSON.stringify(available));
        }
      });
      delay(20, function() {
        return customer.deliver('food', 'patato spaghetti');
      });
      return delay(70, function() {
        return customer.deliver('drink', 'soda water');
      });
    });
  });

}).call(this);
